temp <- nasaweather::atmos %>% group_by(lat, long, year, month) %>% summarise(n())
sum(temp$`n()`!=1)
temp <- nasaweather::borders %>% group_by(country, long, lat) %>% summarise(n())
sum(temp$`n()`!=1)
temp <- nasaweather::borders %>% group_by(country, long, lat) %>% summarise(n())
sum(temp$`n()`!=1)
nasaweather::borders %>% head
temp <- nasaweather::borders %>% group_by(country, long, lat, group) %>% summarise(n())
temp <- nasaweather::borders %>% group_by(country, long, lat, group) %>% summarise(n())
sum(temp$`n()`!=1)
temp <- nasaweather::borders %>% group_by(country, long, lat) %>% summarise(n())
sum(temp$`n()`!=1)
temp <- nasaweather::atmos %>% group_by(lat, long, year, month) %>% summarise(n())
# sum(temp$`n()`!=1)
temp_yrs <- Teams %>% dplyr::filter(teamID == 'BOS', LgWin == 'Y') %>%
dplyr::select(yearID) %>% unlist()
temp_playerID_yearID <- Fielding %>%
dplyr::filter(stint >0 & teamID == 'BOS' & yearID %in% temp_yrs) %>%
dplyr::select(playerID, yearID) %>% group_by(playerID, yearID) %>% dplyr::summarise()
temp_playerID_nameFirst_nameLast <- People %>% filter(playerID %in% temp_playerID_yearID$playerID) %>%
dplyr::select(playerID, nameFirst, nameLast)
rownames(temp_playerID_nameFirst_nameLast) <- temp_playerID_nameFirst_nameLast$playerID
temp_df <- merge(temp_playerID_nameFirst_nameLast, temp_playerID_yearID) %>% dplyr::arrange(nameLast)
temp_df %>% head(10)
temp_yrs <- Teams %>% dplyr::filter(teamID == 'BOS', LgWin == 'Y') %>%
dplyr::select(yearID) %>% unlist()
temp_playerID_yearID <- Fielding %>%
dplyr::filter(stint >0 & teamID == 'BOS' & yearID %in% temp_yrs) %>%
dplyr::select(playerID, yearID) %>% group_by(playerID, yearID) %>% dplyr::summarise()
temp_playerID_nameFirst_nameLast <- People %>% filter(playerID %in% temp_playerID_yearID$playerID) %>%
dplyr::select(playerID, nameFirst, nameLast)
rownames(temp_playerID_nameFirst_nameLast) <- temp_playerID_nameFirst_nameLast$playerID
temp_df <- merge(temp_playerID_nameFirst_nameLast, temp_playerID_yearID) %>%
select(nameFirst, nameLast, yearID) %>% dplyr::arrange(nameLast)
temp_df %>% head(10)
temp_yrs <- Teams %>% dplyr::filter(teamID == 'BOS', LgWin == 'Y') %>%
dplyr::select(yearID) %>% unlist()
temp_playerID_yearID <- Fielding %>%
dplyr::filter(stint >0 & teamID == 'BOS' & yearID %in% temp_yrs) %>%
dplyr::select(playerID, yearID) %>% group_by(playerID, yearID) %>% dplyr::summarise()
temp_playerID_nameFirst_nameLast <- People %>% filter(playerID %in% temp_playerID_yearID$playerID) %>%
dplyr::select(playerID, nameFirst, nameLast)
rownames(temp_playerID_nameFirst_nameLast) <- temp_playerID_nameFirst_nameLast$playerID
temp_df <- merge(temp_playerID_nameFirst_nameLast, temp_playerID_yearID) %>%
select(nameFirst, nameLast, yearID) %>% dplyr::arrange(nameLast) %>% as.tibble()
temp_df %>% head(10)
temp_yrs <- Teams %>% dplyr::filter(teamID == 'BOS', LgWin == 'Y') %>%
dplyr::select(yearID) %>% unlist()
temp_playerID_yearID <- Fielding %>%
dplyr::filter(stint >0 & teamID == 'BOS' & yearID %in% temp_yrs) %>%
dplyr::select(playerID, yearID) %>% group_by(playerID, yearID) %>% dplyr::summarise()
temp_playerID_nameFirst_nameLast <- People %>% filter(playerID %in% temp_playerID_yearID$playerID) %>%
dplyr::select(playerID, nameFirst, nameLast)
rownames(temp_playerID_nameFirst_nameLast) <- temp_playerID_nameFirst_nameLast$playerID
temp_df <- merge(temp_playerID_nameFirst_nameLast, temp_playerID_yearID) %>%
select(nameFirst, nameLast, yearID) %>% dplyr::arrange(nameLast) %>% as_tibble()
temp_df %>% head(10)
temp_df
temp_df %>% print()
temp_salary <- Salaries %>% group_by(yearID, playerID) %>%
dplyr::summarise(total_salary = sum(salary))
temp_playerID_nameFirst_nameLast <- People %>%
filter(playerID %in% temp_salary$playerID) %>%
select(playerID, nameFirst, nameLast)
temp_salary <- merge(temp_playerID_nameFirst_nameLast, temp_salary) %>% arrange(nameLast, yearID)
head(temp_salary)
#
temp_df <- Batting %>% select(playerID, yearID, AB, H) %>%
transmute(playerID = playerID, yearID = yearID, ABH = AB + H)
temp_playerID_nameFirst_nameLast <- People %>%
filter(playerID %in% temp_df$playerID) %>%
select(playerID, nameFirst, nameLast)
temp_df <- merge(temp_playerID_nameFirst_nameLast, temp_df) %>% arrange(nameLast, yearID)
head(temp_df)
temp_ba <- Batting %>% select(playerID, yearID, AB, H) %>%
transmute(playerID = playerID, yearID = yearID, H = H, AB = AB, batting_average = H/AB)
temp_ba_salary <- merge(temp_ba, temp_salary) %>%
filter(yearID > 1985 & AB >= 400)
head(temp_ba_salary)
#
lm(formula = log(total_salary) ~ batting_average, data = temp_ba_salary) %>% summary
#
ggplot(temp_ba_salary, aes(x = batting_average, y = log(total_salary))) +
geom_point(aes(color = yearID)) +
scale_color_gradient(low = 'blue', high = 'red') +
stat_smooth(method = 'lm', color = 'black') +
theme_minimal()
temp_ba_salary %>% head()
temp_ba_salary %>% group_by(playerID, batting_average, total_salary)
temp_ba_salary$yearID %>% unique
temp_ba_salary$yearID %>% unique %>% sort
temp_ba_salary %>% head
lm(formula = log(total_salary) ~ batting_average, data = temp_ba_salary %>% filter(yearID == 1995)) %>% summary
lm(formula = log(total_salary) ~ batting_average, data = temp_ba_salary %>% filter(yearID == 2015)) %>% summary
temp <- lm(formula = log(total_salary) ~ batting_average, data = temp_ba_salary %>% filter(yearID == 2015)) %>% summary
temp$coefficients
temp$coefficients$estimate
temp$coefficients$Estimate
temp$coefficients
temp$coefficients %>% str
temp$coefficients["batting_average", 'Estimate']
temp_ba_salary$yearID
temp_ba_salary$yearID %>% unique
temp_ba_salary$yearID %>% unique %>% sort
2016-1986
temp$coefficients["batting_average", 'Estimate']
llply(
.data = 1986:2016,
.fun = function(iter_year){return(
(lm(
formula = log(total_salary)~batting_average,
data = temp_ba_salary %>% filter(yearID == iter_year)
) %>% summary)$coefficients["batting_average", 'Estimate']
)}
)
llply(
.data = 1986:2016,
.fun = function(iter_year){return(
(lm(
formula = log(total_salary)~batting_average,
data = temp_ba_salary %>% filter(yearID == iter_year)
) %>% summary)$coefficients["batting_average", 'Estimate']
)}
) %>% unlist()
plot(x = 1986:2016,
llply(
.data = 1986:2016,
.fun = function(iter_year){return(
(lm(
formula = log(total_salary)~batting_average,
data = temp_ba_salary %>% filter(yearID == iter_year)
) %>% summary)$coefficients["batting_average", 'Estimate']
)}
) %>% unlist()
)
plot(x = 1986:2016,
llply(
.data = 1986:2016,
.fun = function(iter_year){return(
(lm(
formula = log(total_salary)~batting_average,
data = temp_ba_salary %>% filter(yearID == iter_year)
) %>% summary)$coefficients["batting_average", 'Estimate']
)}
) %>% unlist(), xlab = 'Year (1986~2016)',
ylab = 'Coefficients of Total Salary ~ Batting Average'
)
temp <- llply(
.data = 1986:2016,
.fun = function(iter_year){return(
(lm(
formula = log(total_salary)~batting_average,
data = temp_ba_salary %>% filter(yearID == iter_year)
) %>% summary)$coefficients["batting_average", 'Estimate']
)}
) %>% unlist()
plot(x = 1986:2016, y = temp, xlab = 'Year (1986~2016)',
ylab = 'Coefficients of Total Salary ~ Batting Average')
temp_fit <- lm(temp~1986:2016)
lm(temp~1986:2016)
temp
lm(x = 1986:2016, y = temp)
temp <- llply(
.data = 1986:2016,
.fun = function(iter_year){return(
(lm(
formula = log(total_salary)~batting_average,
data = temp_ba_salary %>% filter(yearID == iter_year)
) %>% summary)$coefficients["batting_average", 'Estimate']
)}
) %>% unlist()
temp
ggplot(temp, aes(x = 1986:2016, y = temp)) +
geom_point()
temp <- llply(
.data = 1986:2016,
.fun = function(iter_year){return(
(lm(
formula = log(total_salary)~batting_average,
data = temp_ba_salary %>% filter(yearID == iter_year)
) %>% summary)$coefficients["batting_average", 'Estimate']
)}
) %>% unlist()
temp <- data.frame(Year = 1986:2016, Coefficients = temp)
ggplot(temp, aes(x = Year, y = Coefficients)) +
geom_point()
ggplot(temp, aes(x = Year, y = Coefficients)) +
geom_point() +
stat_smooth(method = 'lm', color = 'black') +
theme_minimal()
ggplot(temp, aes(x = Year, y = Coefficients)) +
geom_point() +
stat_smooth(method = 'loess', color = 'black') +
theme_minimal()
ggplot(temp, aes(x = Year, y = Coefficients)) +
geom_point() +
stat_smooth(method = 'loess', color = 'black') +
xlab('Year (1986~2016)') +
ylab('Coefficients of Total Salary ~ Batting Average') +
theme_minimal()
temp_ba <- Batting %>% select(playerID, yearID, AB, H) %>%
transmute(playerID = playerID, yearID = yearID, H = H, AB = AB, batting_average = H/AB)
temp_ba_salary <- merge(temp_ba, temp_salary) %>%
filter(yearID > 1985 & AB >= 400)
head(temp_ba_salary)
#
lm(formula = log(total_salary) ~ batting_average, data = temp_ba_salary) %>% summary
#
ggplot(temp_ba_salary, aes(x = batting_average, y = log(total_salary))) +
geom_point(aes(color = yearID)) +
scale_color_gradient(low = 'blue', high = 'red') +
stat_smooth(method = 'lm', color = 'black') +
theme_minimal()
#
temp <- llply(
.data = 1986:2016,
.fun = function(iter_year){return(
(lm(
formula = log(total_salary)~batting_average,
data = temp_ba_salary %>% filter(yearID == iter_year)
) %>% summary)$coefficients["batting_average", 'Estimate']
)}
) %>% unlist()
temp <- data.frame(Year = 1986:2016, Coefficients = temp)
ggplot(temp, aes(x = Year, y = Coefficients)) +
geom_point() +
stat_smooth(method = 'loess', color = 'black') +
xlab('Year (1986~2016)') +
ylab('Coefficients of Total Salary ~ Batting Average') +
theme_minimal()
temp_ba <- Batting %>% select(playerID, yearID, AB, H) %>%
transmute(playerID = playerID, yearID = yearID, H = H, AB = AB, batting_average = H/AB)
temp_ba_salary <- merge(temp_ba, temp_salary) %>%
filter(yearID > 1985 & AB >= 400)
head(temp_ba_salary)
#
lm(formula = log(total_salary) ~ batting_average, data = temp_ba_salary) %>% summary
#
ggplot(temp_ba_salary, aes(x = batting_average, y = log(total_salary))) +
geom_point(aes(color = yearID)) +
scale_color_gradient(low = 'blue', high = 'red') +
stat_smooth(method = 'lm', color = 'black') +
theme_minimal()
#
temp <- llply(
.data = 1986:2016,
.fun = function(iter_year){return(
(lm(
formula = log(total_salary)~batting_average,
data = temp_ba_salary %>% filter(yearID == iter_year)
) %>% summary)$coefficients["batting_average", 'Estimate']
)}
) %>% unlist()
temp <- data.frame(Year = 1986:2016, Coefficients = temp)
ggplot(temp, aes(x = Year, y = Coefficients)) +
geom_point() +
stat_smooth(method = 'loess', color = 'black') +
xlab('Year (1986~2016)') +
ylab('Coefficients of Total Salary ~ Batting Average') +
theme_minimal()
temp_df <- temp_salary %>% filter(
nameFirst == 'John' & (yearID %% 2 ==0) & yearID >1985
) %>% arrange(desc(total_salary))
temp_df %>% head(10)
demandann
# -------------------------------------------------------------------------
TotalCost <- function(x) {
# x[1]: order quantity (units per order)
# x[2]: annual demand
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
unit_perorder <- x[1]
demand_annual <- x[2]
# demand_annual <- 15000
cost_perunit <- 80
cost_opportunity_perunit_peryear <- 0.18
cost_order_perorder <- 220
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
cost_total <-
cost_opportunity_perunit_peryear / 2 * unit_perorder +
cost_order_perorder * demand_annual / unit_perorder +
cost_perunit * demand_annual
return(cost_total)
}
TotalCost(x = c(50, 15000))
TotalCost(x = c(5000, 15000))
library(plyr)
library(tidyverse)
library(Rsolnp)
library(gamlss)
set.seed(2020)
# -------------------------------------------------------------------------
TotalCost_Continuous <- function(x) {
# x[1]: order quantity (units per order)
# x[2]: annual demand
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
unit_perorder <- x[1]
demand_annual <- x[2]
# demand_annual <- 15000
cost_perunit <- 80
cost_opportunity_perunit_peryear <- 0.18
cost_order_perorder <- 220
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
cost_total <-
cost_opportunity_perunit_peryear / 2 * unit_perorder +
cost_order_perorder * demand_annual / unit_perorder +
cost_perunit * demand_annual
return(cost_total)
}
TotalCost <- function(x) {
# x[1]: order quantity (units per order)
# x[2]: annual demand
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
unit_perorder <- x[1]
demand_annual <- x[2]
# demand_annual <- 15000
cost_perunit <- 80
cost_opportunity_perunit_peryear <- 0.18
cost_order_perorder <- 220
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
cost_total <-
(unit_perorder * cost_perunit) *
(1 + cost_opportunity_perunit_peryear * unit_perorder / demand_annual) +
demand_annual / unit_perorder * cost_order_perorder
return(cost_total)
}
if (1) {
list_df <- llply(
.data = 1:1000,
.fun = function(iter_seed) {
set.seed(iter_seed)
demand_annual <- extraDistr::rtriang(
n = 1, a = 14000, b = 17000, c = 15000) %>% round()
pars_init <- c(demand_annual/exp(1), demand_annual)
temp <- solnp(
fun = TotalCost_Continuous,
pars = pars_init, LB = rep(0, 2), UB = rep(Inf, 2),
eqfun = function(x) {return(x[2])}, eqB = demand_annual
)
order_quantity <- round(temp$pars[1])
return(data.frame(
order_quantity = order_quantity,
demand_annual = demand_annual,
annual_number_of_orders = ceiling(demand_annual / order_quantity),
total_cost_min = TotalCost(x = c(order_quantity, demand_annual))
))
},
.progress = 'time'
)
result_df <- Reduce(f = rbind, x = list_df)
}
# Summarize the Monte Carlo results
psych::describe(result_df)
result_df
result_df %>% head
# Distribution fitting, summary, plot
FitDist <- function(temp_seq, type = 'realplus') {
temp_fit <- gamlss::fitDist(temp_seq, type = type, try.gamlss = T)
temp_fit %>% summary() %>% print()
temp_fit %>% plot()
return(temp_fit)
}
FitDist(result_df$order_quantity, type = 'realplus')
FitDist(result_df$demand_annual, type = 'realplus')
result_df$order_quantity %>% hist()
result_df$demand_annual %>% hist()
result_df$annual_number_of_orders %>% hist()
result_df$total_cost_min %>% hist()
result_df$annual_number_of_orders
result_df$annual_number_of_orders %>% head
result_df$annual_number_of_orders %>% unique
FitDist(result_df$annual_number_of_orders, type = 'realplus')
FitDist(result_df$total_cost_min, type = 'realplus')
library(plyr)
library(tidyverse)
library(Rsolnp)
library(gamlss)
set.seed(2020)
# -------------------------------------------------------------------------
TotalCost_Continuous <- function(x) {
# x[1]: order quantity (units per order)
# x[2]: annual demand
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
unit_perorder <- x[1]
demand_annual <- x[2]
# demand_annual <- 15000
cost_perunit <- 80
cost_opportunity_perunit_peryear <- 0.18
cost_order_perorder <- 220
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
cost_total <-
1/2 * cost_opportunity_perunit_peryear *cost_perunit * unit_perorder +
cost_order_perorder * demand_annual / unit_perorder +
cost_perunit * demand_annual
return(cost_total)
}
TotalCost <- function(x) {
# x[1]: order quantity (units per order)
# x[2]: annual demand
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
unit_perorder <- x[1]
demand_annual <- x[2]
# demand_annual <- 15000
cost_perunit <- 80
cost_opportunity_perunit_peryear <- 0.18
cost_order_perorder <- 220
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
cost_total <-
(unit_perorder * cost_perunit) *
(1 + cost_opportunity_perunit_peryear * unit_perorder / demand_annual) +
demand_annual / unit_perorder * cost_order_perorder
return(cost_total)
}
if (1) {
list_df <- llply(
.data = 1:1000,
.fun = function(iter_seed) {
set.seed(iter_seed)
demand_annual <- extraDistr::rtriang(
n = 1, a = 14000, b = 17000, c = 15000) %>% round()
pars_init <- c(demand_annual/exp(1), demand_annual)
temp <- solnp(
fun = TotalCost_Continuous,
# fun = TotalCost,
pars = pars_init, LB = rep(0, 2), UB = rep(Inf, 2),
eqfun = function(x) {return(x[2])}, eqB = demand_annual
)
order_quantity <- round(temp$pars[1])
return(data.frame(
order_quantity = order_quantity,
demand_annual = demand_annual,
annual_number_of_orders = ceiling(demand_annual / order_quantity),
total_cost_min = TotalCost(x = c(order_quantity, demand_annual))
))
},
.progress = 'time'
)
result_df <- Reduce(f = rbind, x = list_df)
}
# Summarize the Monte Carlo results
psych::describe(result_df)
# Distribution fitting, summary, plot
FitDist <- function(temp_seq, type = 'realplus') {
temp_fit <- gamlss::fitDist(temp_seq, type = type, try.gamlss = T)
temp_fit %>% summary() %>% print()
temp_fit %>% plot()
return(temp_fit)
}
FitDist(result_df$order_quantity, type = 'realplus')
FitDist(result_df$demand_annual, type = 'realplus')
FitDist(result_df$annual_number_of_orders, type = 'realplus')
FitDist(result_df$total_cost_min, type = 'realplus')
hist(result_df$annual_number_of_orders)
result_df$annual_number_of_orders %>% unique
TotalCost <- function(x) {
# x[1]: order quantity (units per order)
# x[2]: annual demand
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
unit_perorder <- x[1]
demand_annual <- x[2]
# demand_annual <- 15000
cost_perunit <- 80
cost_opportunity_perunit_peryear <- 0.18
cost_order_perorder <- 220
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
cost_total <-
(unit_perorder * cost_perunit) *
(1 + 1/2*cost_opportunity_perunit_peryear * unit_perorder / demand_annual) +
demand_annual / unit_perorder * cost_order_perorder
return(cost_total)
}
TotalCost(x = c(50, 15000))
TotalCost <- function(x) {
# x[1]: order quantity (units per order)
# x[2]: annual demand
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
unit_perorder <- x[1]
demand_annual <- x[2]
# demand_annual <- 15000
cost_perunit <- 80
cost_opportunity_perunit_peryear <- 0.18
cost_order_perorder <- 220
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
cost_total <-
demand_annual / unit_perorder * cost_order_perorder +
1/2 * cost_opportunity_perunit_peryear * unit_perorder * cost_perunit +
cost_perunit * demand_annual
return(cost_total)
}
TotalCost(x = c(50, 15000))
TotalCost_Continuous(x = c(50, 15000))
source('~/Documents/Writers/Decision Making_21/DecisionMaking_Part2.R', echo=TRUE)
source('~/Documents/Writers/Decision Making_21/DecisionMaking_Part2.R', echo=TRUE)
TotalCost_Continuous(x = c(50, 15000))
TotalCost(x = c(50, 15000))
solnp(
fun = TotalCost,
# fun = TotalCost,
pars = pars_init, LB = rep(0, 2), UB = rep(Inf, 2),
eqfun = function(x) {return(x[2])}, eqB = demand_annual
)
solnp(
fun = TotalCost,
# fun = TotalCost,
pars = c(50, 15000), LB = rep(0, 2), UB = rep(Inf, 2),
eqfun = function(x) {return(x[2])}, eqB = demand_annual
)
solnp(
fun = TotalCost,
# fun = TotalCost,
pars = c(50, 15000), LB = rep(0, 2), UB = rep(Inf, 2),
eqfun = function(x) {return(x[2])}, eqB = 15000
)
