)
temp_colnames <- c('ANOVA', temp_colnames)
#
temp_pval <-
apply(
X = temp_index, MARGIN = 2,
FUN = function(
iter_seq_index
) {
t.test(
as.numeric(iter_Abundancy_Genus[
list_group_colname[[seq_group_name[iter_seq_index[1]]]]
]),
as.numeric(iter_Abundancy_Genus[
list_group_colname[[seq_group_name[iter_seq_index[2]]]]
])
)$p.value
})
temp_colnames
temp_pval
temp_index
colnames(iter_Abundancy_Genus) %in% list_group_colname$seq_Control
iter_Abundancy_Genus
colnames(iter_Abundancy_Genus)
str_extract(string = colnames(df_Abundancy_Genus), pattern = '((?i)Control)')
str_extract(string = colnames(df_Abundancy_Genus),
pattern = '((?i)Bacteriophage)|((?i)Control)|((?i)Mix)|((?i)UV)')
str_extract(string = colnames(df_Abundancy_Genus),
pattern = '((?i)Bacteriophage)|((?i)Control)|((?i)Mix)|((?i)UV)') %>% na.omit()
str_extract(
string = colnames(df_Abundancy_Genus),
pattern = '((?i)Bacteriophage)|((?i)Control)|((?i)Mix)|((?i)UV)'
) %>% factor()
list_group_colname
str_extract(
string = colnames(df_Abundancy_Genus),
pattern = '((?i)Bacteriophage)|((?i)Control)|((?i)Mix)|((?i)UV)'
) %>% factor() %>% na.omit()
df_anova <- data.frame(
group = str_extract(
string = colnames(df_Abundancy_Genus),
pattern = '((?i)Bacteriophage)|((?i)Control)|((?i)Mix)|((?i)UV)'
) %>% factor() %>% na.omit()
)
df_anova
unlist(list_group_colname)
df_anova
df_anova <- data.frame(
group = str_extract(
string = colnames(df_Abundancy_Genus),
pattern = '((?i)Bacteriophage)|((?i)Control)|((?i)Mix)|((?i)UV)'
) %>% factor(levels = c('Control', 'Bacteriophage', 'UV', 'Mix')) %>% na.omit()
)
df_anova
df_anova <- data.frame(
group = str_extract(
string = colnames(df_Abundancy_Genus),
pattern = '((?i)Bacteriophage)|((?i)Control)|((?i)Mix)|((?i)UV)'
) %>%
factor(levels = c('Control', 'Bacteriophage', 'UV', 'Mix'), ordered = T) %>%
na.omit()
)
df_anova
str_extract(
string = colnames(df_Abundancy_Genus),
pattern = '((?i)Bacteriophage)|((?i)Control)|((?i)Mix)|((?i)UV)'
) %>%
factor(levels = c('Control', 'Bacteriophage', 'UV', 'Mix'), ordered = T)
colnames(df_Abundancy_Genus)
df_Abundancy_Genus
str_extract(
string = colnames(df_Abundancy_Genus),
pattern = '((?i)Bacteriophage)|((?i)Control)|((?i)Mix)|((?i)UV)'
) %>%
factor(levels = c('Control', 'Bacteriophage', 'UV', 'Mix'), ordered = T) %>%
sort() %>%
na.omit()
df_anova <- data.frame(
group = str_extract(
string = colnames(df_Abundancy_Genus),
pattern = '((?i)Bacteriophage)|((?i)Control)|((?i)Mix)|((?i)UV)'
) %>%
factor(levels = c('Control', 'Bacteriophage', 'UV', 'Mix'), ordered = T) %>%
sort() %>%
na.omit()
)
df_anova
iter_Abundancy_Genus[unlist(list_group_colname)]
iter_Abundancy_Genus[unlist(list_group_colname)] %>% as.list()
iter_Abundancy_Genus[unlist(list_group_colname)] %>% as.numeric()
dfte
dfanova
df_anova
df_temp <- df_anova
df_temp['Abundancy'] <- as.numeric(
iter_Abundancy_Genus[unlist(list_group_colname)]
)
df_temp
iter_Abundancy_Genus[unlist(list_group_colname)] %>% as.numeric()
temp_pval
temp_colnames
summary(aov(formula = Abundancy ~ group,
data = df_temp))[[1]]$`Pr(>F)`[1]
# setwd('/Users/chengh/Desktop/Tomoso_project')
setwd('~/Documents/R/Numerical_Ecology/Hong/')
rm(list = ls())
df_Abundancy_Genus <- readr::read_csv('total.csv')
if (1) {
# for manual clip importation
# df_Abundancy_Genus <- clipr::read_clip_tbl()
df_Abundancy_Genus <-
df_Abundancy_Genus[, colnames(df_Abundancy_Genus) != 'rank']
# list_group_colname: save column names in each group to this list
# (?i) to ignore case: '(?i)control' for both 'CONTROL' and 'control'.
list_group_colname <- list(
seq_Control = str_subset(string = colnames(df_Abundancy_Genus),
pattern = '(?i)control'),
seq_Bacteriophage = str_subset(string = colnames(df_Abundancy_Genus),
pattern = '(?i)bacteriophage'),
seq_UV = str_subset(string = colnames(df_Abundancy_Genus),
pattern = '(?i)UV'),
seq_Mix = str_subset(string = colnames(df_Abundancy_Genus),
pattern = '(?i)Mix')
)
df_anova <- data.frame(
group = str_extract(
string = colnames(df_Abundancy_Genus),
pattern = '((?i)Bacteriophage)|((?i)Control)|((?i)Mix)|((?i)UV)'
) %>%
factor(levels = c('Control', 'Bacteriophage', 'UV', 'Mix'), ordered = T) %>%
sort() %>%
na.omit()
)
}
#
df_result <- alply(
.data = df_Abundancy_Genus,
.margins = 1, .progress = 'time',
.fun = function(
iter_Abundancy_Genus,
seq_group_name = names(list_group_colname)
) {
temp_index <- combn(1:length(list_group_colname), 2)
#
temp_colnames <-
apply(X = temp_index, MARGIN = 2,
FUN = function(iter_seq_index) {
temp <- paste0('t (', seq_group_name[iter_seq_index[1]],
' ~ ', seq_group_name[iter_seq_index[2]], ')')
gsub(pattern = 'seq_', replacement = '', x = temp)
}
)
temp_colnames <- c('ANOVA', temp_colnames)
#
temp_pval <-
apply(
X = temp_index, MARGIN = 2,
FUN = function(
iter_seq_index
) {
t.test(
as.numeric(iter_Abundancy_Genus[
list_group_colname[[seq_group_name[iter_seq_index[1]]]]
]),
as.numeric(iter_Abundancy_Genus[
list_group_colname[[seq_group_name[iter_seq_index[2]]]]
])
)$p.value
})
#
df_temp <- df_anova
df_temp['Abundancy'] <- as.numeric(
iter_Abundancy_Genus[unlist(list_group_colname)]
)
#
temp_pval <- c(
summary(aov(formula = Abundancy ~ group,
data = df_temp))[[1]]$`Pr(>F)`[1],
temp_pval
)
#
names(temp_pval) <- temp_colnames
#
return(temp_pval)
}
)
df_result
df_result <- do.call(rbind, df_result)
df_result
df_result %>% head
df_result[is.nan(df_result)] <- NA
rownames(df_result) <- df_Abundancy_Genus$name
clipr::write_clip(df_result, na = 'NA')
df_result
df_result
library(plyr)
library(tidyverse)
# setwd('/Users/chengh/Desktop/Tomoso_project')
setwd('~/Documents/R/Numerical_Ecology/Hong/')
rm(list = ls())
df_Abundancy_Genus <- readr::read_csv('total.csv')
if (1) {
# for manual clip importation
# df_Abundancy_Genus <- clipr::read_clip_tbl()
df_Abundancy_Genus <-
df_Abundancy_Genus[, colnames(df_Abundancy_Genus) != 'rank']
# list_group_colname: save column names in each group to this list
# (?i) to ignore case: '(?i)control' for both 'CONTROL' and 'control'.
list_group_colname <- list(
seq_Control = str_subset(string = colnames(df_Abundancy_Genus),
pattern = '(?i)control'),
seq_Bacteriophage = str_subset(string = colnames(df_Abundancy_Genus),
pattern = '(?i)bacteriophage'),
seq_UV = str_subset(string = colnames(df_Abundancy_Genus),
pattern = '(?i)UV'),
seq_Mix = str_subset(string = colnames(df_Abundancy_Genus),
pattern = '(?i)Mix')
)
df_anova <- data.frame(
group = str_extract(
string = colnames(df_Abundancy_Genus),
pattern = '((?i)Bacteriophage)|((?i)Control)|((?i)Mix)|((?i)UV)'
) %>%
factor(levels = c('Control', 'Bacteriophage', 'UV', 'Mix'), ordered = T) %>%
sort() %>%
na.omit()
)
}
if (1) {
#
df_result <- alply(
.data = df_Abundancy_Genus,
.margins = 1, .progress = 'time',
.fun = function(
iter_Abundancy_Genus,
seq_group_name = names(list_group_colname)
) {
temp_index <- combn(1:length(list_group_colname), 2)
#
temp_colnames <-
apply(X = temp_index, MARGIN = 2,
FUN = function(iter_seq_index) {
temp <- paste0('t (', seq_group_name[iter_seq_index[1]],
' ~ ', seq_group_name[iter_seq_index[2]], ')')
gsub(pattern = 'seq_', replacement = '', x = temp)
}
)
temp_colnames <- c('ANOVA', temp_colnames)
#
temp_pval <-
apply(
X = temp_index, MARGIN = 2,
FUN = function(
iter_seq_index
) {
t.test(
as.numeric(iter_Abundancy_Genus[
list_group_colname[[seq_group_name[iter_seq_index[1]]]]
]),
as.numeric(iter_Abundancy_Genus[
list_group_colname[[seq_group_name[iter_seq_index[2]]]]
])
)$p.value
})
#
df_temp <- df_anova
df_temp['Abundancy'] <- as.numeric(
iter_Abundancy_Genus[unlist(list_group_colname)]
)
#
temp_pval <- c(
summary(aov(formula = Abundancy ~ group,
data = df_temp))[[1]]$`Pr(>F)`[1],
temp_pval
)
#
names(temp_pval) <- temp_colnames
#
return(temp_pval)
}
)
df_result <- do.call(rbind, df_result)
}
if (1) {
df_result[is.nan(df_result)] <- NA
rownames(df_result) <- df_Abundancy_Genus$name
write_csv(x = df_result, path = 'df_result.csv')
# for manual clip exportation
clipr::write_clip(df_result, na = 'NA')
}
write_csv(x = df_result, path = 'df_result.csv')
df_result %>%head
df_result %>%data.frame()
df_result %>%data.frame()
library(plyr)
library(tidyverse)
# setwd('/Users/chengh/Desktop/Tomoso_project')
setwd('~/Documents/R/Numerical_Ecology/Hong/')
rm(list = ls())
df_Abundancy_Genus <- readr::read_csv('total.csv')
if (1) {
# for manual clip importation
# df_Abundancy_Genus <- clipr::read_clip_tbl()
df_Abundancy_Genus <-
df_Abundancy_Genus[, colnames(df_Abundancy_Genus) != 'rank']
# list_group_colname: save column names in each group to this list
# (?i) to ignore case: '(?i)control' for both 'CONTROL' and 'control'.
list_group_colname <- list(
seq_Control = str_subset(string = colnames(df_Abundancy_Genus),
pattern = '(?i)control'),
seq_Bacteriophage = str_subset(string = colnames(df_Abundancy_Genus),
pattern = '(?i)bacteriophage'),
seq_UV = str_subset(string = colnames(df_Abundancy_Genus),
pattern = '(?i)UV'),
seq_Mix = str_subset(string = colnames(df_Abundancy_Genus),
pattern = '(?i)Mix')
)
df_anova <- data.frame(
group = str_extract(
string = colnames(df_Abundancy_Genus),
pattern = '((?i)Bacteriophage)|((?i)Control)|((?i)Mix)|((?i)UV)'
) %>%
factor(levels = c('Control', 'Bacteriophage', 'UV', 'Mix'), ordered = T) %>%
sort() %>%
na.omit()
)
}
if (1) {
#
df_result <- alply(
.data = df_Abundancy_Genus,
.margins = 1, .progress = 'time',
.fun = function(
iter_Abundancy_Genus,
seq_group_name = names(list_group_colname)
) {
temp_index <- combn(1:length(list_group_colname), 2)
#
temp_colnames <-
apply(X = temp_index, MARGIN = 2,
FUN = function(iter_seq_index) {
temp <- paste0('t (', seq_group_name[iter_seq_index[1]],
' ~ ', seq_group_name[iter_seq_index[2]], ')')
gsub(pattern = 'seq_', replacement = '', x = temp)
}
)
temp_colnames <- c('ANOVA', temp_colnames)
#
temp_pval <-
apply(
X = temp_index, MARGIN = 2,
FUN = function(
iter_seq_index
) {
t.test(
as.numeric(iter_Abundancy_Genus[
list_group_colname[[seq_group_name[iter_seq_index[1]]]]
]),
as.numeric(iter_Abundancy_Genus[
list_group_colname[[seq_group_name[iter_seq_index[2]]]]
])
)$p.value
})
#
df_temp <- df_anova
df_temp['Abundancy'] <- as.numeric(
iter_Abundancy_Genus[unlist(list_group_colname)]
)
#
temp_pval <- c(
summary(aov(formula = Abundancy ~ group,
data = df_temp))[[1]]$`Pr(>F)`[1],
temp_pval
)
#
names(temp_pval) <- temp_colnames
#
return(temp_pval)
}
)
df_result <- do.call(rbind, df_result)
}
if (1) {
df_result[is.nan(df_result)] <- NA
rownames(df_result) <- df_Abundancy_Genus$name
write_csv(x = data.frame(df_result), path = 'df_result.csv')
# for manual clip exportation
clipr::write_clip(df_result, na = 'NA')
}
df_result
df_result
library(plyr)
library(tidyverse)
# setwd('/Users/chengh/Desktop/Tomoso_project')
setwd('~/Documents/R/Numerical_Ecology/Hong/')
rm(list = ls())
df_Abundancy_Genus <- readr::read_csv('total.csv')
if (1) {
# for manual clip importation
# df_Abundancy_Genus <- clipr::read_clip_tbl()
df_Abundancy_Genus <-
df_Abundancy_Genus[, colnames(df_Abundancy_Genus) != 'rank']
# list_group_colname: save column names in each group to this list
# (?i) to ignore case: '(?i)control' for both 'CONTROL' and 'control'.
list_group_colname <- list(
seq_Control = str_subset(string = colnames(df_Abundancy_Genus),
pattern = '(?i)control'),
seq_Bacteriophage = str_subset(string = colnames(df_Abundancy_Genus),
pattern = '(?i)bacteriophage'),
seq_UV = str_subset(string = colnames(df_Abundancy_Genus),
pattern = '(?i)UV'),
seq_Mix = str_subset(string = colnames(df_Abundancy_Genus),
pattern = '(?i)Mix')
)
df_anova <- data.frame(
group = str_extract(
string = colnames(df_Abundancy_Genus),
pattern = '((?i)Bacteriophage)|((?i)Control)|((?i)Mix)|((?i)UV)'
) %>%
factor(levels = c('Control', 'Bacteriophage', 'UV', 'Mix'), ordered = T) %>%
sort() %>%
na.omit()
)
}
if (1) {
#
df_result <- alply(
.data = df_Abundancy_Genus,
.margins = 1, .progress = 'time',
.fun = function(
iter_Abundancy_Genus,
seq_group_name = names(list_group_colname)
) {
temp_index <- combn(1:length(list_group_colname), 2)
#
temp_colnames <-
apply(X = temp_index, MARGIN = 2,
FUN = function(iter_seq_index) {
temp <- paste0('t (', seq_group_name[iter_seq_index[1]],
' ~ ', seq_group_name[iter_seq_index[2]], ')')
gsub(pattern = 'seq_', replacement = '', x = temp)
}
)
temp_colnames <- c('ANOVA', temp_colnames)
#
temp_pval <-
apply(
X = temp_index, MARGIN = 2,
FUN = function(
iter_seq_index
) {
t.test(
as.numeric(iter_Abundancy_Genus[
list_group_colname[[seq_group_name[iter_seq_index[1]]]]
]),
as.numeric(iter_Abundancy_Genus[
list_group_colname[[seq_group_name[iter_seq_index[2]]]]
])
)$p.value
})
#
df_temp <- df_anova
df_temp['Abundancy'] <- as.numeric(
iter_Abundancy_Genus[unlist(list_group_colname)]
)
#
temp_pval <- c(
summary(aov(formula = Abundancy ~ group,
data = df_temp))[[1]]$`Pr(>F)`[1],
temp_pval
)
#
names(temp_pval) <- temp_colnames
#
return(temp_pval)
}
)
df_result <- do.call(rbind, df_result)
}
if (1) {
df_result[is.nan(df_result)] <- NA
rownames(df_result) <- df_Abundancy_Genus$name
write_csv(x = data.frame(df_result), path = 'df_result.csv')
# for manual clip exportation
clipr::write_clip(df_result, na = 'NA')
}
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Initialize the for later ANOVA tests
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
df_anova <- data.frame(
group = str_extract(
string = colnames(df_Abundancy_Genus),
pattern = '((?i)Bacteriophage)|((?i)Control)|((?i)Mix)|((?i)UV)'
) %>%
factor(levels = c('Control', 'Bacteriophage', 'UV', 'Mix'), ordered = T) %>%
sort() %>%
na.omit()
)
df_anova
combn(1:4, 2)
combn(1:3, 2)
df_Abundancy_Genus <- readr::read_csv('total.csv')
df_Abundancy_Genus %>% select(-rank)
library(plyr)
library(tidyverse)
# setwd('/Users/chengh/Desktop/Tomoso_project')
setwd('~/Documents/R/Numerical_Ecology/Hong/')
rm(list = ls())
df_Abundancy_Genus <- readr::read_csv('total.csv')
df_Abundancy_Genus <- df_Abundancy_Genus %>% select(-rank)
df_Abundancy_Genus %>% hed
df_Abundancy_Genus %>% View
