Y <- as.matrix(Y)
X <- Phylum_WQ_io[,c("COD_in", "DO_in", "TN_in", "TP_in",
"p__Actinobacteria", "p__Bacteroidetes",
"p__Chlorobi", "p__Deinococcus.Thermus",
"p__Planctomycetes", "p__Proteobacteria",
"Other"
)]
X <- as.matrix(X)
colnames(X) <- paste0('X.',colnames(X))
colnames(Y) <- paste0('Y.',colnames(Y))
df <- data.frame(cbind(X,Y))
#
fit_plsr <- plsr(Y ~ X, data = df)
plot(fit_plsr)
# number of components with cross-validation
fit_plsr_cv <- crossval(fit_plsr, segments = 10)
# selectNcomp(fit_plsr_cv, method = "onesigma", plot = TRUE)
# selectNcomp(fit_plsr_cv, method = "randomization", plot = TRUE)
plot(MSEP(fit_plsr_cv), legendpos = 'topright')
summary(fit_plsr_cv, what = 'validation')
# select ncomp = 7
fit_plsr <- plsr(Y ~ X, data = df, ncomp = 7)
plot(fit_plsr)
}
fit_plsr$coefficients
plot(fit_plsr, layout = c(2,2))
par(mfrow= c(2,2))
plot(fit_plsr)
par(mfrow= c(2,2))
plot(fit_plsr)
fit_plsr$model
# pls ---------------------------------------------------------------------
if(1){
library(pls)
Y <- Phylum_WQ_io[,c("COD_out", "DO_out", "TN_out", "TP_out")]
Y <- as.matrix(Y)
X <- Phylum_WQ_io[,c("COD_in", "DO_in", "TN_in", "TP_in",
"p__Actinobacteria", "p__Bacteroidetes",
"p__Chlorobi", "p__Deinococcus.Thermus",
"p__Planctomycetes", "p__Proteobacteria",
"Other"
)]
X <- as.matrix(X)
colnames(X) <- paste0('X.',colnames(X))
colnames(Y) <- paste0('Y.',colnames(Y))
df <- data.frame(cbind(X,Y))
#
fit_plsr <- plsr(Y ~ X, data = df)
plot(fit_plsr)
# number of components with cross-validation
fit_plsr_cv <- crossval(fit_plsr, segments = 10)
# selectNcomp(fit_plsr_cv, method = "onesigma", plot = TRUE)
# selectNcomp(fit_plsr_cv, method = "randomization", plot = TRUE)
plot(MSEP(fit_plsr_cv), legendpos = 'topright')
summary(fit_plsr_cv, what = 'validation')
# select ncomp = 7
fit_plsr <- plsr(Y ~ X, data = df, ncomp = 7)
plot(fit_plsr)
}
fit_plsr$model
fit_plsr$Yloadings
fit_plsr$scores
fit_plsr$loading.weights
library(pls)
Y <- Phylum_WQ_io[,c("COD_out", "DO_out", "TN_out", "TP_out")]
Y <- as.matrix(Y)
X <- Phylum_WQ_io[,c("COD_in", "DO_in", "TN_in", "TP_in",
"p__Actinobacteria", "p__Bacteroidetes",
"p__Chlorobi", "p__Deinococcus.Thermus",
"p__Planctomycetes", "p__Proteobacteria",
"Other"
)]
X <- as.matrix(X)
colnames(X) <- paste0('X.',colnames(X))
colnames(Y) <- paste0('Y.',colnames(Y))
df <- data.frame(cbind(X,Y))
#
fit_plsr <- plsr(Y ~ X, data = df)
plot(fit_plsr)
summary(fit_plsr)
# number of components with cross-validation
fit_plsr_cv <- crossval(fit_plsr, segments = 10)
# selectNcomp(fit_plsr_cv, method = "onesigma", plot = TRUE)
# selectNcomp(fit_plsr_cv, method = "randomization", plot = TRUE)
plot(MSEP(fit_plsr_cv), legendpos = 'topright')
summary(fit_plsr_cv, what = 'validation')
# select ncomp = 7
fit_plsr <- plsr(Y ~ X, data = df, ncomp = 7)
plot(fit_plsr)
explvar(fit_plsr_cv)
explvar(fit_plsr)
cumsum(explvar(fit_plsr))
cumsum(explvar(fit_plsr_cv))
plot(fit_plsr, ncomp = 7)
plot(fit_plsr, ncomp = 7, asp = 1, line = T)
# prediction vs. plot
plot(fit_plsr_cv, ncomp = 7, asp = 1, line = T)
#
plot(fit_plsr_cv, plottype = "scores", comps = 1:3)
#
plot(fit_plsr_cv, plottype = "scores", comps = 1:7)
#
plot(fit_plsr_cv, plottype = "scores", comps = 1:3)
fit_plsr_cv$coefficients
# number of components with cross-validation
fit_plsr_cv <- crossval(fit_plsr, scale = T, segments = 10)
#
fit_plsr <- plsr(Y ~ X, data = df, scale = T)
plot(fit_plsr)
# number of components with cross-validation
fit_plsr_cv <- crossval(fit_plsr, scale = T, segments = 10)
# selectNcomp(fit_plsr_cv, method = "onesigma", plot = TRUE)
# selectNcomp(fit_plsr_cv, method = "randomization", plot = TRUE)
plot(MSEP(fit_plsr_cv), legendpos = 'topright')
# prediction vs. measured plot
plot(fit_plsr_cv, ncomp = 7, asp = 1, line = T)
#
fit_plsr <- plsr(Y ~ X, data = df, scale = T)
plot(fit_plsr)
plot(fit_plsr, asp = 1, line = T)
#
fit_plsr <- plsr(Y ~ X, data = df, scale = T)
plot(fit_plsr, asp = 1, line = T)
# number of components with cross-validation
fit_plsr_cv <- crossval(fit_plsr, scale = T, segments = 10)
# selectNcomp(fit_plsr_cv, method = "onesigma", plot = TRUE)
# selectNcomp(fit_plsr_cv, method = "randomization", plot = TRUE)
plot(MSEP(fit_plsr_cv), legendpos = 'topright')
summary(fit_plsr_cv, what = 'validation')
# select ncomp = 6
fit_plsr <- plsr(Y ~ X, data = df, ncomp = 7)
# select ncomp = 6
ncomp <- 6
fit_plsr <- plsr(Y ~ X, data = df, ncomp = ncomp)
# prediction vs. measured plot
plot(fit_plsr_cv, ncomp = ncomp, asp = 1, line = T)
#
plot(fit_plsr_cv, plottype = "scores", comps = 1:3)
#
plot(fit_plsr_cv, plottype = "scores", comps = 1:4)
fit_plsr_cv$coefficients
fit_plsr_cv$coefficients[ncomp]
fit_plsr_cv$coefficients[,,ncomp]
fit_plsr_cv$coefficients[,,11]
#
fit_plsr_cv$coefficients[,,ncomp]
fit_plsr_cv$coefficients[,,11]
#
fit_plsr_cv$coefficients[,,ncomp]
fit_plsr_cv$coefficients[,,11]
fit_plsr_cv$scores
fit_plsr_cv$loading.weights
fit_plsr_cv$projection
fit_plsr_cv$scores
dim(Y)
#
fit_plsr_cv$coefficients[,,ncomp]
fit_plsr_cv$coefficients[,,11]
fit_plsr_cv$Yloadings
fit_plsr_cv$Yscores
fit_plsr_cv$projection
fit_plsr_cv$validation
fit_plsr_cv$loading.weights
fit_plsr_cv$loadings
fit_plsr_cv$scores
fit_plsr_cv$coefficients
fit_plsr_cv$scores
fit_plsr_cv$projection
fit_plsr_cv$Yloadings
fit_plsr_cv$Xtotvar
fit_plsr_cv$terms
fit_plsr_cv$scale
fit_plsr_cv$Xtotvar
fit_plsr_cv$Xvar
fit_plsr_cv$loadings
fit_plsr_cv$loading.weights
fit_plsr_cv$Yscores
fit_plsr_cv$Yloadings
fit_plsr_cv$Yscores
fit_plsr_cv$Yloadings
fit_plsr_cv$loadings
fit_plsr_cv$scores
fit_plsr_cv$projection
#
fit_plsr_cv$scores
fit_plsr_cv$loadings
fit_plsr_cv$projection
fit_plsr_cv$scores
fit_plsr_cv$residuals
fit_plsr_cv$fitted.values
fit_plsr_cv$fitted.values[,,ncomp]
Y
#
plot(fit_plsr_cv, plottype = "scores", comps = 1:4)
# diagnosis
plot(fit_plsr_cv, plottype = "scores", comps = 1:ncomp)
X.mdmr
# prediction vs. measured plot
plot(fit_plsr_cv, ncomp = ncomp, asp = 1, line = T)
# prediction vs. measured plot
plot(fit_plsr_cv, ncomp = ncomp, asp = 1, line = T)
plot(fit_plsr_cv$fitted.values[,,ncomp],
Y)
plot(fit_plsr_cv$fitted.values[,,ncomp],Y, asp = 1, line = T)
plot(fit_plsr_cv$fitted.values[,,ncomp],Y, asp = 1)
plot(fit_plsr_cv$fitted.values[,,ncomp],Y, asp = 1, line = T)
plot(fit_plsr_cv$fitted.values[,,ncomp],Y, asp = 1, line = T)
plot(fit_plsr_cv$fitted.values[,,ncomp],Y, asp = 1)
plot(fit_plsr_cv$fitted.values[,,ncomp],Y, asp = 1)
plot(fit_plsr_cv$fitted.values[,,ncomp],Y)
plot(fit_plsr_cv$fitted.values[,,ncomp],Y, asp = 1, line = T)
plot(fit_plsr_cv$fitted.values[,,ncomp],Y, asp = 1,
xlab = 'Predicted Value',
ylab = 'Measured Value')
abline(b=1)
abline(a=0, b=1)
plot(fit_plsr_cv$fitted.values[,,ncomp], Y,
asp = 1,
xlab = 'Predicted Value',
ylab = 'Measured Value')
abline(a=0, b=1)
plot(fit_plsr_cv$fitted.values[,,ncomp], Y,
asp = 1, xlim = c(-5,25), ylim = c(-5,25),
xlab = 'Predicted Value',
ylab = 'Measured Value')
abline(a=0, b=1)
Y
# prediction vs. measured plot
plot(fit_plsr_cv, ncomp = ncomp, asp = 1, line = T)
head(Y)
head(X)
dim(X)
# PLSR ---------------------------------------------------------------------
if(1){
library(pls)
Y <- Phylum_WQ_io[,c("COD_out", "DO_out", "TN_out", "TP_out")]
Y <- as.matrix(Y)
X <- Phylum_WQ_io[,c("COD_in", "DO_in", "TN_in", "TP_in",
"p__Actinobacteria", "p__Bacteroidetes",
"p__Chlorobi", "p__Deinococcus.Thermus",
"p__Planctomycetes", "p__Proteobacteria",
"Other"
)]
X <- as.matrix(X)
colnames(X) <- paste0('X.',colnames(X))
colnames(Y) <- paste0('Y.',colnames(Y))
df <- data.frame(cbind(X,Y))
#
fit_plsr <- plsr(Y ~ X, data = df, scale = T)
plot(fit_plsr, asp = 1, line = T)
# number of components with cross-validation
fit_plsr_cv <- crossval(fit_plsr, scale = T, segments = 10)
# selectNcomp(fit_plsr_cv, method = "onesigma", plot = TRUE)
# selectNcomp(fit_plsr_cv, method = "randomization", plot = TRUE)
plot(MSEP(fit_plsr_cv), legendpos = 'topright')
summary(fit_plsr_cv, what = 'validation')
# select ncomp = 6
ncomp <- 6
fit_plsr <- plsr(Y ~ X, data = df, ncomp = ncomp)
# prediction vs. measured plot
plot(fit_plsr_cv, ncomp = ncomp, asp = 1, line = T)
fit_plsr_cv$fitted.values[,,ncomp]
Y
plot(fit_plsr_cv$fitted.values[,,ncomp], Y,
asp = 1, xlim = c(-5,25), ylim = c(-5,25),
xlab = 'Predicted Value',
ylab = 'Measured Value')
abline(a=0, b=1)
# diagnosis
plot(fit_plsr_cv, plottype = "scores", comps = 1:ncomp)
fit_plsr_cv$scores
fit_plsr_cv$loadings
fit_plsr_cv$Yscores
fit_plsr_cv$Yloadings
fit_plsr_cv$projection
}
setwd("/Users/chengt/OneDrive/MBR_Yasmeen")
load('MBR_Yasmeen.RData')
# PLSR ---------------------------------------------------------------------
if(1){
library(pls)
Y <- Phylum_WQ_io[,c("COD_out", "DO_out", "TN_out", "TP_out")]
Y <- as.matrix(Y)
X <- Phylum_WQ_io[,c("COD_in", "DO_in", "TN_in", "TP_in",
"p__Actinobacteria", "p__Bacteroidetes",
"p__Chlorobi", "p__Deinococcus.Thermus",
"p__Planctomycetes", "p__Proteobacteria",
"Other"
)]
X <- as.matrix(X)
colnames(X) <- paste0('X.',colnames(X))
colnames(Y) <- paste0('Y.',colnames(Y))
df <- data.frame(cbind(X,Y))
#
fit_plsr <- plsr(Y ~ X, data = df, scale = T)
plot(fit_plsr, asp = 1, line = T)
# number of components with cross-validation
fit_plsr_cv <- crossval(fit_plsr, scale = T, segments = 10)
# selectNcomp(fit_plsr_cv, method = "onesigma", plot = TRUE)
# selectNcomp(fit_plsr_cv, method = "randomization", plot = TRUE)
plot(MSEP(fit_plsr_cv), legendpos = 'topright')
summary(fit_plsr_cv, what = 'validation')
# select ncomp = 6
ncomp <- 6
fit_plsr <- plsr(Y ~ X, data = df, ncomp = ncomp)
# prediction vs. measured plot
plot(fit_plsr_cv, ncomp = ncomp, asp = 1, line = T)
fit_plsr_cv$fitted.values[,,ncomp]
Y
plot(fit_plsr_cv$fitted.values[,,ncomp], Y,
asp = 1, xlim = c(-5,25), ylim = c(-5,25),
xlab = 'Predicted Value',
ylab = 'Measured Value')
abline(a=0, b=1)
# diagnosis
plot(fit_plsr_cv, plottype = "scores", comps = 1:ncomp)
fit_plsr_cv$scores
fit_plsr_cv$loadings
fit_plsr_cv$Yscores
fit_plsr_cv$Yloadings
fit_plsr_cv$projection
}
install.packages("PLSbiplot1")
#
PLSbiplot1::PLS.biplot(fit_plsr_cv)
#
PLSbiplot1::PLS.biplot(X = X, Y = Y)
#
PLSbiplot1::PLS.biplot(X = X, Y = Y, algorithm = 'mod.KernelPLS_L')
#
PLSbiplot1::PLS.biplot(X = X, Y = Y, algorithm = mod.KernelPLS_L)
PLS.biplot(X = X, Y = Y, algorithm = mod.KernelPLS_L)
#
library(PLSbiplot1)
PLS.biplot(X = X, Y = Y, algorithm = mod.KernelPLS_L)
PLS.biplot(X = X, Y = Y, algorithm = 'mod.KernelPLS_L')
PLS.biplot(X = X, Y = Y, algorithm = mod.KernelPLS_L)
PLS.biplot(X = X, Y = Y, algorithm = mod.KernelPLS_R)
PLS.biplot(X = X, Y = Y, algorithm = mod.SIMPLS())
PLS.biplot(X = X, Y = Y, algorithm = mod.SIMPLS
}
PLS.biplot(X = X, Y = Y, algorithm = mod.SIMPLS)
head(X)
PLS.biplot(X = X, Y = Y)
Y <- Phylum_WQ_io[,c("COD_out", "DO_out", "TN_out", "TP_out")]
Y <- as.matrix(Y)
X <- Phylum_WQ_io[,c("COD_in", "DO_in", "TN_in", "TP_in",
"p__Actinobacteria", "p__Bacteroidetes",
"p__Chlorobi", "p__Deinococcus.Thermus",
"p__Planctomycetes", "p__Proteobacteria",
"Other"
)]
X <- as.matrix(X)
PLS.biplot(X = X, Y = Y)
PLS.biplot(X = X, Y = Y, algorithm = mod.SIMPLS)
X <- Phylum_WQ_io[,c("COD_in", "DO_in", "TN_in", "TP_in",
"p__Actinobacteria", "p__Bacteroidetes",
"p__Chlorobi", "p__Deinococcus.Thermus",
"p__Planctomycetes", "p__Proteobacteria",
"Other"
)]
X
clipr::read_clip()
clipr::read_clip(sep = ',')
XYrowname <- clipr::read_clip()
clipr::write_clip(XYrowname, breaks = '\", \"')
X <- Phylum_WQ_io[,c("COD_in", "DO_in", "TN_in", "TP_in",
"p__Actinobacteria", "p__Bacteroidetes",
"p__Chlorobi", "p__Deinococcus.Thermus",
"p__Planctomycetes", "p__Proteobacteria",
"Other"
)]
X <- as.matrix(X)
colnames(X) <- paste0('X.',colnames(X))
colnames(Y) <- paste0('Y.',colnames(Y))
rownames(X) <- rownames(Y) <-
c("Ref_123", "Ref_121", "Ref_122",
"A1_133", "A1_134", "A1_135",
"B1_130", "B1_131", "B1_132",
"B1_136", "B1_137", "B1_138",
"B2_114", "B2_115", "B2_116",
"A2_117", "A2_118", "A2_119")
PLS.biplot(X = X, Y = Y, algorithm = mod.SIMPLS)
X
plot(fit_plsr_cv, method = 'biplot')
plot(fit_plsr_cv, 'biplot')
library(pls)
Y <- Phylum_WQ_io[,c("COD_out", "DO_out", "TN_out", "TP_out")]
# Y <- as.matrix(Y)
X <- Phylum_WQ_io[,c("COD_in", "DO_in", "TN_in", "TP_in",
"p__Actinobacteria", "p__Bacteroidetes",
"p__Chlorobi", "p__Deinococcus.Thermus",
"p__Planctomycetes", "p__Proteobacteria",
"Other"
)]
# X <- as.matrix(X)
colnames(X) <- paste0('X.',colnames(X))
colnames(Y) <- paste0('Y.',colnames(Y))
rownames(X) <- rownames(Y) <-
c("Ref_123", "Ref_121", "Ref_122",
"A1_133", "A1_134", "A1_135",
"B1_130", "B1_131", "B1_132",
"B1_136", "B1_137", "B1_138",
"B2_114", "B2_115", "B2_116",
"A2_117", "A2_118", "A2_119")
df <- data.frame(cbind(X,Y))
#
fit_plsr <- plsr(Y ~ X, data = df, scale = T)
head(Y)
head(df)
remove.packages("PLSbiplot1")
plot(fit_plsr_cv, 'biplot')
# diagnosis
plot(fit_plsr_cv, plottype = "scores", comps = 1:ncomp)
# diagnosis
plot(fit_plsr_cv, 'biplot')
Y <- Phylum_WQ_io[,c("COD_out", "DO_out", "TN_out", "TP_out")]
Y <- as.matrix(Y)
X <- Phylum_WQ_io[,c("COD_in", "DO_in", "TN_in", "TP_in",
"p__Actinobacteria", "p__Bacteroidetes",
"p__Chlorobi", "p__Deinococcus.Thermus",
"p__Planctomycetes", "p__Proteobacteria",
"Other"
)]
# X <- as.matrix(X)
colnames(X) <- paste0('X.',colnames(X))
colnames(Y) <- paste0('Y.',colnames(Y))
rownames(X) <- rownames(Y) <-
c("Ref_123", "Ref_121", "Ref_122",
"A1_133", "A1_134", "A1_135",
"B1_130", "B1_131", "B1_132",
"B1_136", "B1_137", "B1_138",
"B2_114", "B2_115", "B2_116",
"A2_117", "A2_118", "A2_119")
df <- data.frame(cbind(X,Y))
#
fit_plsr <- plsr(Y ~ X, data = df, scale = T)
Y <- Phylum_WQ_io[,c("COD_out", "DO_out", "TN_out", "TP_out")]
# Y <- as.matrix(Y)
X <- Phylum_WQ_io[,c("COD_in", "DO_in", "TN_in", "TP_in",
"p__Actinobacteria", "p__Bacteroidetes",
"p__Chlorobi", "p__Deinococcus.Thermus",
"p__Planctomycetes", "p__Proteobacteria",
"Other"
)]
X <- as.matrix(X)
colnames(X) <- paste0('X.',colnames(X))
colnames(Y) <- paste0('Y.',colnames(Y))
rownames(X) <- rownames(Y) <-
c("Ref_123", "Ref_121", "Ref_122",
"A1_133", "A1_134", "A1_135",
"B1_130", "B1_131", "B1_132",
"B1_136", "B1_137", "B1_138",
"B2_114", "B2_115", "B2_116",
"A2_117", "A2_118", "A2_119")
df <- data.frame(cbind(X,Y))
#
fit_plsr <- plsr(Y ~ X, data = df, scale = T)
Y <- Phylum_WQ_io[,c("COD_out", "DO_out", "TN_out", "TP_out")]
Y <- as.matrix(Y)
X <- Phylum_WQ_io[,c("COD_in", "DO_in", "TN_in", "TP_in",
"p__Actinobacteria", "p__Bacteroidetes",
"p__Chlorobi", "p__Deinococcus.Thermus",
"p__Planctomycetes", "p__Proteobacteria",
"Other"
)]
X <- as.matrix(X)
colnames(X) <- paste0('X.',colnames(X))
colnames(Y) <- paste0('Y.',colnames(Y))
rownames(X) <- rownames(Y) <-
c("Ref_123", "Ref_121", "Ref_122",
"A1_133", "A1_134", "A1_135",
"B1_130", "B1_131", "B1_132",
"B1_136", "B1_137", "B1_138",
"B2_114", "B2_115", "B2_116",
"A2_117", "A2_118", "A2_119")
df <- data.frame(cbind(X,Y))
#
fit_plsr <- plsr(Y ~ X, data = df, scale = T)
plot(fit_plsr, asp = 1, line = T)
# number of components with cross-validation
fit_plsr_cv <- crossval(fit_plsr, scale = T, segments = 10)
# selectNcomp(fit_plsr_cv, method = "onesigma", plot = TRUE)
# selectNcomp(fit_plsr_cv, method = "randomization", plot = TRUE)
plot(MSEP(fit_plsr_cv), legendpos = 'topright')
summary(fit_plsr_cv, what = 'validation')
# select ncomp = 6
ncomp <- 6
fit_plsr <- plsr(Y ~ X, data = df, ncomp = ncomp)
# prediction vs. measured plot
plot(fit_plsr_cv, ncomp = ncomp, asp = 1, line = T)
fit_plsr_cv$fitted.values[,,ncomp]
Y
plot(fit_plsr_cv$fitted.values[,,ncomp], Y,
asp = 1, xlim = c(-5,25), ylim = c(-5,25),
xlab = 'Predicted Value',
ylab = 'Measured Value')
abline(a=0, b=1)
# diagnosis
plot(fit_plsr_cv, 'biplot')
# diagnosis
plot(fit_plsr_cv, 'biplot', 'y')
# diagnosis
plot(fit_plsr_cv, 'biplot', which = 'y')
plot(fit_plsr_cv, 'biplot', which = 'loadings')
# diagnosis
plot(fit_plsr_cv, 'biplot', which = 'x')
# diagnosis
plot(fit_plsr_cv, 'biplot', which = 'x')
plot(fit_plsr_cv, 'biplot', which = 'y')
plot(fit_plsr_cv, 'biplot', which = 'scores')
plot(fit_plsr_cv, 'biplot', which = 'loadings')
