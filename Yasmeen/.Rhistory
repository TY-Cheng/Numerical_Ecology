color_out),
pch = c(shape_efficiency, shape_in, shape_out),
lwd = 1.3,
# bty = 'n',
bg = 'white',
cex = 1.8)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
dev.off()
}
# TS TN -------------------------------------------------------------------
if (1) {
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
cairo_pdf(filename = 'TimeSeries_TN.pdf', width = 12, height = 6)
par(cex = 1,
# oma = c(3, 2, 4, 2),
mar = c(3.5, 3.5, 4, 3.5),
# mgp = c(.5, .5, 0),
xpd = NA)
# Overall
y <- df$TN_in
plot(x = df$Date, y = y, cex = 1,
xlim = range(df$Date), ylim = c(0, 100),
xaxt = 'n', yaxt = 'n', type = 'n',
main = '', xlab = '', ylab = '', cex.axis = 1)
axis(side = 1,
at = c(rectangle$V1, tail(rectangle$V2,1)),
labels = c(rectangle$V1_axis, tail(rectangle$V2_axis,1)),
col = 'black', col.axis = 'black', lwd = 2.5, cex.axis = 1)
# Lines
axis(side = 2, at = seq(0, 50, 5), labels = seq(0, 50, 5),
col = 'black', col.axis = 'black', lwd = 2.5,
cex.axis = 1)
lines(x = df$Date, y = y, type = 'o', cex = 1.1, lwd = 1.3,
col = color_in,
pch = shape_in)
y <- df$TN_out
lines(x = df$Date, y = y, type = 'o', cex = 1.1, lwd = 1.3,
col = color_out,
pch = shape_out)
# Removal Efficiency
par(new = T)
plot(x = df$Date, y = y, cex = 1,
xlim = range(df$Date), ylim = c(-100, 100),
xaxt = 'n', yaxt = 'n', type = 'n',
main = '', xlab = '', ylab = '', cex.axis = 1)
axis(side = 4, at = seq(0, 100, 10), labels = seq(0, 100, 10),
col = 'black', col.axis = 'black',
lwd = 2.5,
cex.axis = 1)
#
y <- (1-(df$TN_out/df$TN_in))*100
lines(x = df$Date, y = y, type = 'o', cex = 1.1, lwd = 1.3,
col = color_efficiency,
pch = shape_efficiency)
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Breaks
for (iter in rowMeans(rectangle[rectangle$colour == '#99999980',c('V1','V2')])) {
axis.break(axis = 1, breakpos = iter, pos = NULL,
bgcol = "white", breakcol = "black",
style = "zigzag", brw = 0.02)
}
# Rectangle
for (iter in 1:nrow(rectangle)) {
rect(xleft = rectangle[iter, 'V1'], xright = rectangle[iter, 'V2'],
ybottom = -200,  ytop = 200,
col = rectangle$colour[iter], density = NA)
}
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
abline(v = temp,
h = c(seq(-100, 0, 20), seq(0, 100, 20)),
col = 'gray', lty = 5, lwd = 1, xpd = F)
# abline(h = 0, lty = 2, xpd = F)
mtext(text = rectangle$Condition, side = 3, line = .3,
adj = c(.13, .30, .50, .71, .91),
col = 'black', cex = 1.3)
title('(B)', cex.main = 1.3, line = 2.5)
mtext(text = 'Time (day)', side = 1, line = 2.2, adj = .5, cex = 1.7)
mtext(text = 'TN removal efficiency (%)',
side = 4, line = 2.2, adj = 1, col = 'black', cex = 1.6)
mtext(text = 'TN concentration (mg/L)',
side = 2, line = 2, adj = 0, col = 'black', cex = 1.6)
shape::Arrows(x0 = c(15, 15, 95, 95),
y0 = c(-70, -70, 60, 60),
x1 = c(11, 15, 95, 100),
y1 = c(-70, -85, 45, 60),
arr.type = 'triangle', lwd = 1)
# Legend add in the first
# Points legend
legend(x = 61, y = 10,
# 'right',
# inset = c(.03),
legend = c('Removal efficiency',
'Influent concentration',
'Effluent concentration'),
col = c(color_efficiency,
color_in,
color_out),
pch = c(shape_efficiency, shape_in, shape_out),
lwd = 1.3,
# bty = 'n',
bg = 'white',
cex = 1.8)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
dev.off()
}
# TS COD ------------------------------------------------------------------
if (1) {
cairo_pdf(filename = 'TimeSeries_COD.pdf', width = 12, height = 7)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
par(cex = 1,
# oma = c(3, 2, 4, 2),
mar = c(3.5, 3.5, 4, 3.5),
# mgp = c(.5, .5, 0),
xpd = NA)
# Overall
y <- df$COD_in
plot(x = df$Date, y = y, cex = 1,
xlim = range(df$Date), ylim = c(0, 1000),
xaxt = 'n', yaxt = 'n', type = 'n',
main = '', xlab = '', ylab = '', cex.axis = 1)
axis(side = 1,
at = c(rectangle$V1, tail(rectangle$V2,1)),
labels = c(rectangle$V1_axis, tail(rectangle$V2_axis,1)),
col = 'black', col.axis = 'black', lwd = 2.5, cex.axis = 1)
# Lines
axis(side = 2, at = seq(0, 500, 50), labels = seq(0, 500, 50),
col = 'black', col.axis = 'black', lwd = 2.5,
cex.axis = 1)
lines(x = df$Date, y = y, type = 'o', cex = 1.1, lwd = 1.3,
col = color_in,
pch = shape_in)
y <- df$COD_out
lines(x = df$Date, y = y, type = 'o', cex = 1.1, lwd = 1.3,
col = color_out,
pch = shape_out)
# Removal Efficiency
par(new = T)
plot(x = df$Date, y = y, cex = 1,
xlim = range(df$Date), ylim = c(-100, 100),
xaxt = 'n', yaxt = 'n', type = 'n',
main = '', xlab = '', ylab = '', cex.axis = 1)
axis(side = 4, at = seq(0, 100, 10), labels = seq(0, 100, 10),
col = 'black', col.axis = 'black',
lwd = 2.5,
cex.axis = 1)
y <- (1-(df$COD_out/df$COD_in))*100
lines(x = df$Date, y = y, type = 'o', cex = 1.1, lwd = 1.3,
col = color_efficiency,
pch = shape_efficiency)
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Breaks
for (iter in rowMeans(rectangle[rectangle$colour == '#99999980',c('V1','V2')])) {
axis.break(axis = 1, breakpos = iter, pos = NULL,
bgcol = "white", breakcol = "black",
style = "zigzag", brw = 0.02)
}
# Rectangle
for (iter in 1:nrow(rectangle)) {
rect(xleft = rectangle[iter, 'V1'], xright = rectangle[iter, 'V2'],
ybottom = -1000,  ytop = 1040,
col = rectangle$colour[iter], density = NA)
}
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
abline(v = temp,
h = c(seq(-100, 0, 20), seq(0, 100, 20)),
col = 'gray', lty = 5, lwd = 1, xpd = F)
# abline(h = 0, lty = 2, xpd = F)
mtext(text = rectangle$Condition, side = 3, line = .3,
adj = c(.13, .30, .50, .71, .91),
col = 'black', cex = 1.3)
title('(A)', cex.main = 1.3, line = 2.5)
mtext(text = 'Time (day)', side = 1, line = 2.2, adj = .5, cex = 1.7)
mtext(text = 'COD removal efficiency (%)',
side = 4, line = 2.2, adj = 1.1, col = 'black', cex = 1.6)
mtext(text = 'COD concentration (mg/L)',
side = 2, line = 2, adj = 0, col = 'black', cex = 1.6)
shape::Arrows(x0 = c(15, 15, 95, 95),
y0 = c(-70, -70, 60, 60),
x1 = c(11, 15, 95, 100),
y1 = c(-70, -85, 45, 60),
arr.type = 'triangle', lwd = 1)
# Legend add in the first
# Points legend
legend(x = 61, y = 10,
# 'right',
# inset = c(.03),
legend = c('Removal efficiency',
'Influent concentration',
'Effluent concentration'),
col = c(color_efficiency,
color_in,
color_out),
pch = c(shape_efficiency, shape_in, shape_out),
lwd = 1.3,
# bty = 'n',
bg = 'white',
cex = 1.8)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
dev.off()
}
# TS TN -------------------------------------------------------------------
if (1) {
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
cairo_pdf(filename = 'TimeSeries_TN.pdf', width = 12, height = 7)
par(cex = 1,
# oma = c(3, 2, 4, 2),
mar = c(3.5, 3.5, 4, 3.5),
# mgp = c(.5, .5, 0),
xpd = NA)
# Overall
y <- df$TN_in
plot(x = df$Date, y = y, cex = 1,
xlim = range(df$Date), ylim = c(0, 100),
xaxt = 'n', yaxt = 'n', type = 'n',
main = '', xlab = '', ylab = '', cex.axis = 1)
axis(side = 1,
at = c(rectangle$V1, tail(rectangle$V2,1)),
labels = c(rectangle$V1_axis, tail(rectangle$V2_axis,1)),
col = 'black', col.axis = 'black', lwd = 2.5, cex.axis = 1)
# Lines
axis(side = 2, at = seq(0, 50, 5), labels = seq(0, 50, 5),
col = 'black', col.axis = 'black', lwd = 2.5,
cex.axis = 1)
lines(x = df$Date, y = y, type = 'o', cex = 1.1, lwd = 1.3,
col = color_in,
pch = shape_in)
y <- df$TN_out
lines(x = df$Date, y = y, type = 'o', cex = 1.1, lwd = 1.3,
col = color_out,
pch = shape_out)
# Removal Efficiency
par(new = T)
plot(x = df$Date, y = y, cex = 1,
xlim = range(df$Date), ylim = c(-100, 100),
xaxt = 'n', yaxt = 'n', type = 'n',
main = '', xlab = '', ylab = '', cex.axis = 1)
axis(side = 4, at = seq(0, 100, 10), labels = seq(0, 100, 10),
col = 'black', col.axis = 'black',
lwd = 2.5,
cex.axis = 1)
#
y <- (1-(df$TN_out/df$TN_in))*100
lines(x = df$Date, y = y, type = 'o', cex = 1.1, lwd = 1.3,
col = color_efficiency,
pch = shape_efficiency)
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Breaks
for (iter in rowMeans(rectangle[rectangle$colour == '#99999980',c('V1','V2')])) {
axis.break(axis = 1, breakpos = iter, pos = NULL,
bgcol = "white", breakcol = "black",
style = "zigzag", brw = 0.02)
}
# Rectangle
for (iter in 1:nrow(rectangle)) {
rect(xleft = rectangle[iter, 'V1'], xright = rectangle[iter, 'V2'],
ybottom = -200,  ytop = 200,
col = rectangle$colour[iter], density = NA)
}
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
abline(v = temp,
h = c(seq(-100, 0, 20), seq(0, 100, 20)),
col = 'gray', lty = 5, lwd = 1, xpd = F)
# abline(h = 0, lty = 2, xpd = F)
mtext(text = rectangle$Condition, side = 3, line = .3,
adj = c(.13, .30, .50, .71, .91),
col = 'black', cex = 1.3)
title('(B)', cex.main = 1.3, line = 2.5)
mtext(text = 'Time (day)', side = 1, line = 2.2, adj = .5, cex = 1.7)
mtext(text = 'TN removal efficiency (%)',
side = 4, line = 2.2, adj = 1, col = 'black', cex = 1.6)
mtext(text = 'TN concentration (mg/L)',
side = 2, line = 2, adj = 0, col = 'black', cex = 1.6)
shape::Arrows(x0 = c(15, 15, 95, 95),
y0 = c(-70, -70, 60, 60),
x1 = c(11, 15, 95, 100),
y1 = c(-70, -85, 45, 60),
arr.type = 'triangle', lwd = 1)
# Legend add in the first
# Points legend
legend(x = 61, y = 10,
# 'right',
# inset = c(.03),
legend = c('Removal efficiency',
'Influent concentration',
'Effluent concentration'),
col = c(color_efficiency,
color_in,
color_out),
pch = c(shape_efficiency, shape_in, shape_out),
lwd = 1.3,
# bty = 'n',
bg = 'white',
cex = 1.8)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
dev.off()
}
# TS TP -------------------------------------------------------------------
if (1) {
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
cairo_pdf(filename = 'TimeSeries_TP.pdf', width = 12, height = 7)
par(cex = 1,
# oma = c(3, 2, 4, 2),
mar = c(3.5, 3.5, 4, 3.5),
# mgp = c(.5, .5, 0),
xpd = NA)
# Overall
y <- df$TP_in
plot(x = df$Date, y = y, cex = 1,
xlim = range(df$Date), ylim = c(0, 20),
xaxt = 'n', yaxt = 'n', type = 'n',
main = '', xlab = '', ylab = '', cex.axis = 1)
axis(side = 1,
at = c(rectangle$V1, tail(rectangle$V2,1)),
labels = c(rectangle$V1_axis, tail(rectangle$V2_axis,1)),
col = 'black', col.axis = 'black', lwd = 2.5, cex.axis = 1)
# Lines
axis(side = 2, at = seq(0, 10, 1), labels = seq(0, 10, 1),
col = 'black', col.axis = 'black', lwd = 2.5,
cex.axis = 1)
lines(x = df$Date, y = y, type = 'o', cex = 1.1, lwd = 1.3,
col = color_in,
pch = shape_in)
y <- df$TP_out
lines(x = df$Date, y = y, type = 'o', cex = 1.1, lwd = 1.3,
col = color_out,
pch = shape_out)
# Removal Efficiency
par(new = T)
plot(x = df$Date, y = y, cex = 1,
xlim = range(df$Date), ylim = c(-300, 100),
xaxt = 'n', yaxt = 'n', type = 'n',
main = '', xlab = '', ylab = '', cex.axis = 1)
axis(side = 4, at = seq(-100, 100, 20), labels = seq(-100, 100, 20),
col = 'black', col.axis = 'black', lwd = 2.5,
cex.axis = 1)
#
y <- (1-(df$TP_out/df$TP_in))*100
lines(x = df$Date, y = y, type = 'o', cex = 1.1, lwd = 1.3,
col = color_efficiency,
pch = shape_efficiency)
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Breaks
for (iter in rowMeans(rectangle[rectangle$colour == '#99999980',c('V1','V2')])) {
axis.break(axis = 1, breakpos = iter, pos = NULL,
bgcol = "white", breakcol = "black",
style = "zigzag", brw = 0.02)
}
# Rectangle
for (iter in 1:nrow(rectangle)) {
rect(xleft = rectangle[iter, 'V1'], xright = rectangle[iter, 'V2'],
ybottom = -1000,  ytop = 200,
col = rectangle$colour[iter], density = NA)
}
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
abline(v = temp,
h = c(seq(-300, -100, 40), seq(-100, 100, 40)),
col = 'gray', lty = 5, lwd = 1, xpd = F)
# abline(h = 0, lty = 2, xpd = F)
mtext(text = rectangle$Condition, side = 3, line = .3,
adj = c(.13, .30, .50, .71, .91),
col = 'black', cex = 1.3)
title('(C)', cex.main = 1.3, line = 2.5)
mtext(text = 'Time (day)', side = 1, line = 2.2, adj = .5, cex = 1.7)
mtext(text = 'TP removal efficiency (%)',
side = 4, line = 2.2, adj = 1, col = 'black', cex = 1.6)
mtext(text = 'TP concentration (mg/L)',
side = 2, line = 2, adj = 0, col = 'black', cex = 1.6)
# shape::Arrows(x0 = c(5, 5, 60, 60),
#               y0 = c(-240, -240, 0, 0),
#               x1 = c(3, 5, 60, 62),
#               y1 = c(-240, -270, -30, 0),
#               arr.type = 'triangle', lwd = 1)
shape::Arrows(x0 = c(15, 15, 95, 95),
y0 = c(-240, -240, 0, 0),
x1 = c(11, 15, 95, 100),
y1 = c(-240, -270, -30, 0),
arr.type = 'triangle', lwd = 1)
# Legend add in the first
# Points legend
legend(x = 61, y = -80,
# 'right',
# inset = c(.03),
legend = c('Removal efficiency',
'Influent concentration',
'Effluent concentration'),
col = c(color_efficiency,
color_in,
color_out),
pch = c(shape_efficiency, shape_in, shape_out),
lwd = 1.3,
# bty = 'n',
bg = 'white',
cex = 1.8)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
dev.off()
}
# TS NH4N -----------------------------------------------------------------
if (1) {
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
cairo_pdf(filename = 'TimeSeries_NH4N.pdf', width = 12, height = 7)
par(cex = 1,
# oma = c(3, 2, 4, 2),
mar = c(3.5, 3.5, 4, 3.5),
# mgp = c(.5, .5, 0),
xpd = NA)
# Overall
y <- df$NH4N_in
plot(x = df$Date, y = y, cex = 1,
xlim = range(df$Date), ylim = c(0, 100),
xaxt = 'n', yaxt = 'n', type = 'n',
main = '', xlab = '', ylab = '', cex.axis = 1)
axis(side = 1,
at = c(rectangle$V1, tail(rectangle$V2,1)),
labels = c(rectangle$V1_axis, tail(rectangle$V2_axis,1)),
col = 'black', col.axis = 'black', lwd = 2.5, cex.axis = 1)
# Lines
axis(side = 2, at = seq(0, 50, 5), labels = seq(0, 50, 5),
col = 'black', col.axis = 'black', lwd = 2.5, cex.axis = .8)
lines(x = df$Date, y = y, type = 'o', cex = 1.1, lwd = 1.3,
col = color_in,
pch = shape_in)
y <- df$NH4N_out
lines(x = df$Date, y = y, type = 'o', cex = 1.1, lwd = 1.3,
col = color_out,
pch = shape_out)
# Removal Efficiency
par(new = T)
plot(x = df$Date, y = y, cex = 1,
xlim = range(df$Date), ylim = c(-100, 100),
xaxt = 'n', yaxt = 'n', type = 'n',
main = '', xlab = '', ylab = '', cex.axis = 1)
axis(side = 4, at = seq(0, 100, 10), labels = seq(0, 100, 10),
col = 'black', col.axis = 'black',
lwd = 2.5,
cex.axis = 1)
#
y <- (1-(df$NH4N_out/df$NH4N_in))*100
lines(x = df$Date, y = y, type = 'o', cex = 1.1, lwd = 1.3,
col = color_efficiency,
pch = shape_efficiency)
#
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Breaks
for (iter in rowMeans(rectangle[rectangle$colour == '#99999980',c('V1','V2')])) {
axis.break(axis = 1, breakpos = iter, pos = NULL,
bgcol = "white", breakcol = "black",
style = "zigzag", brw = 0.02)
}
# Rectangle
for (i in 1:nrow(rectangle)) {
rect(xleft = rectangle[i, 'V1'], xright = rectangle[i, 'V2'],
ybottom = -1000,  ytop = 1000,
col = rectangle$colour[i], density = NA)
}
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
abline(v = temp,
h = c(seq(-100, 0, 20), seq(0, 100, 20)),
col = 'gray', lty = 5, lwd = 1, xpd = F)
# abline(h = 0, lty = 2, xpd = F)
mtext(text = rectangle$Condition, side = 3, line = .3,
adj = c(.13, .30, .50, .71, .91),
col = 'black', cex = 1.3)
title('(D)', cex.main = 1.3, line = 2.5)
mtext(text = 'Time (day)', side = 1, line = 2.2, adj = .5, cex = 1.7)
mtext(text = 'NH4N removal efficiency (%)',
side = 4, line = 2.2, adj = 1.1, col = 'black', cex = 1.6)
mtext(text = 'NH4N concentration (mg/L)',
side = 2, line = 2, adj = 0, col = 'black', cex = 1.6)
#
shape::Arrows(x0 = c(15, 15, 95, 95),
y0 = c(-80, -80, 50, 50),
x1 = c(11, 15, 95, 100),
y1 = c(-80, -95, 35, 50),
arr.type = 'triangle', lwd = 1)
# Legend add in the first
# Points legend
legend(x = 61, y = 10,
# 'right',
# inset = c(.03),
legend = c('Removal efficiency',
'Influent concentration',
'Effluent concentration'),
col = c(color_efficiency,
color_in,
color_out),
pch = c(shape_efficiency, shape_in, shape_out),
lwd = 1.3,
# bty = 'n',
bg = 'white',
cex = 1.8)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
dev.off()
}
